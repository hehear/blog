{"meta":{"title":"RunningCoder","subtitle":"blog","description":"RunningCoder's Blog","author":"cola","url":"http://runningcoder.top","root":"/"},"pages":[{"title":"404 Not Found","date":"2019-05-16T15:53:00.403Z","updated":"2019-05-16T15:53:00.403Z","comments":true,"path":"404.html","permalink":"http://runningcoder.top/404.html","excerpt":"","text":"404 Not Found 很抱歉，您访问的页面不存在可能是输入地址有误或该地址已被删除"},{"title":"我的朋友们","date":"2019-05-16T16:02:43.511Z","updated":"2019-05-16T16:02:43.510Z","comments":true,"path":"friends/index.html","permalink":"http://runningcoder.top/friends/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2019-05-16T18:00:26.676Z","updated":"2019-05-16T16:02:43.000Z","comments":true,"path":"history/index.html","permalink":"http://runningcoder.top/history/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2019-05-16T15:51:06.612Z","updated":"2019-05-16T15:51:06.611Z","comments":true,"path":"tags/index.html","permalink":"http://runningcoder.top/tags/index.html","excerpt":"","text":""},{"title":"关于","date":"2019-05-16T15:41:47.770Z","updated":"2019-05-16T15:41:47.769Z","comments":true,"path":"about/index.html","permalink":"http://runningcoder.top/about/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2019-05-16T16:21:32.652Z","updated":"2019-05-16T16:21:32.651Z","comments":true,"path":"categories/index.html","permalink":"http://runningcoder.top/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"docker分离部署springboot并外置静态文件","slug":"docker分离部署springboot并外置静态文件","date":"2019-05-16T18:29:27.000Z","updated":"2019-05-16T18:40:24.947Z","comments":true,"path":"2019/05/17/docker分离部署springboot并外置静态文件/","link":"","permalink":"http://runningcoder.top/2019/05/17/docker分离部署springboot并外置静态文件/","excerpt":"打包springbootdocker部署springboot项目时，每次上传war/jar包耗时耗力，并且每次都要修改配置文件，所以用docker部署时，将springboot项目打包时将项目的代码、静态文件、配置文件、lib分离，每次升级只需上传修改的代码即可，同时将静态文件等外挂到服务器，修改时只需修改完重启容器应用即可，无需重新build镜像。","text":"打包springbootdocker部署springboot项目时，每次上传war/jar包耗时耗力，并且每次都要修改配置文件，所以用docker部署时，将springboot项目打包时将项目的代码、静态文件、配置文件、lib分离，每次升级只需上传修改的代码即可，同时将静态文件等外挂到服务器，修改时只需修改完重启容器应用即可，无需重新build镜像。 1. 修改pom.xml文件 设定打成jar包 1234&lt;groupId&gt;com.blog&lt;/groupId&gt;&lt;artifactId&gt;MyBlog&lt;/artifactId&gt;&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&lt;packaging&gt;jar&lt;/packaging&gt; build标签下设定打包的名称 1&lt;finalName&gt;MyBlog&lt;/finalName&gt; build plugins标签下配置打包成jar 12345678910111213141516171819202122&lt;!--打包jar--&gt;&lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;excludes&gt; &lt;exclude&gt;**/*.properties&lt;/exclude&gt; &lt;exclude&gt;**/*.xml&lt;/exclude&gt; &lt;/excludes&gt; &lt;archive&gt; &lt;manifest&gt; &lt;mainClass&gt;com.blog.MyBlogApplication&lt;/mainClass&gt; &lt;addClasspath&gt;true&lt;/addClasspath&gt; &lt;classpathPrefix&gt;lib/&lt;/classpathPrefix&gt; &lt;/manifest&gt; &lt;manifestEntries&gt; &lt;Class-Path&gt;./&lt;/Class-Path&gt; &lt;/manifestEntries&gt; &lt;/archive&gt; &lt;outputDirectory&gt;$&#123;project.build.directory&#125;&lt;/outputDirectory&gt; &lt;/configuration&gt;&lt;/plugin&gt; build plugins标签下配置打包依赖lib 1234567891011121314151617&lt;!--打包依赖lib--&gt;&lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;copy-dependencies&lt;/id&gt; &lt;phase&gt;prepare-package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;copy-dependencies&lt;/goal&gt; &lt;/goals&gt; &lt;configuration&gt; &lt;outputDirectory&gt;$&#123;project.build.directory&#125;/lib&lt;/outputDirectory&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;/executions&gt;&lt;/plugin&gt; build plugins标签下配置打包resource 1234567891011121314151617181920212223&lt;!--打包resource--&gt;&lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;copy-resources&lt;/id&gt; &lt;phase&gt;prepare-package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;copy-resources&lt;/goal&gt; &lt;/goals&gt; &lt;configuration&gt; &lt;encoding&gt;UTF-8&lt;/encoding&gt; &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;outputDirectory&gt;$&#123;project.build.directory&#125;/&lt;/outputDirectory&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;/executions&gt;&lt;/plugin&gt; build resources标签下配置打包时将jsp文件拷贝到META-INF目录 12345678910111213141516171819&lt;resources&gt; &lt;!-- 打包时将jsp文件拷贝到META-INF目录下 --&gt; &lt;resource&gt; &lt;!-- 指定resources插件处理哪个目录下的资源文件 --&gt; &lt;directory&gt;src/main/webapp&lt;/directory&gt; &lt;!--注意此次必须要放在此目录下才能被访问到 --&gt; &lt;targetPath&gt;META-INF/resources&lt;/targetPath&gt; &lt;includes&gt; &lt;include&gt;**/**&lt;/include&gt; &lt;/includes&gt; &lt;/resource&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/**&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;false&lt;/filtering&gt; &lt;/resource&gt;&lt;/resources&gt; 2. 打包springboot项目3. 配置dockerfile1234567FROM frolvlad/alpine-oraclejdk8:slimVOLUME /tmpARG DEPENDENCY=MyBlogCOPY $&#123;DEPENDENCY&#125;/BOOT-INF/lib /app/libCOPY $&#123;DEPENDENCY&#125;/META-INF /app/META-INFCOPY $&#123;DEPENDENCY&#125;/BOOT-INF/classes /appENTRYPOINT [\"java\",\"-cp\",\"app:app/lib/*\",\"com.blog.MyBlogApplication\"] - FROM jdk，运行jar文件- VOLUME /tmp springboot内置tomcat存放- ARG 解压springboot的文件夹- COPY 将解压项目中的静态文件等copy到容器中指定位置，用于指定外挂- ENTRYPOINT 中com.blog.MyBlogApplication为springboot启动类4. 在linux服务器上创建文件夹blog5. 将解压的springboot项目、Dockerfile文件传输到服务器的blog文件夹6. docker build镜像 进入linux的blog文件夹 执行docker命令将springboot项目build成镜像 1docker build -t blog . - 注意语句结束后的“.”,不可省略7. 创建容器，并外挂静态文件123456docker run --name myblog -it -p 8081:8080-v /etc/config/blog/META-INF:/app/META-INF-v /etc/config/blog/lib:/app/lib-v /etc/config/blog/static:/app/static-v /etc/config/blog/application.properties:/app/application.properties-d blog - –name容器名称- -p 8081:8080 端口映射，8081服务器端口映射到容器的8080端口- -v /etc/config/blog/META-INF:/app/META-INF 将容器中/app/META-INF（jsp文件）挂载到服务器的/etc/config/blog/META-INF目录下，其他几个-v命令也是如此。- -d blog 镜像名称到此部署成功","categories":[],"tags":[]}]}